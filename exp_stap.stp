probe kernel.function("netlink_setsockopt") {
    if (execname() == "cve"){
        printf("[S] (%d - %d) >> NETLINK_SETSOCKOPT(%s)\n", pid(), tid(), $$parms);
        dump_netlink_socket($sock);
    }
}
probe kernel.function("__wake_up_common") {
    if (execname() == "cve") {
        printf("[S] (%d - %d) >> __wake_up_common(%s)\n", pid(), tid(), $$parms);
        dump_wait_queue($q);
    }
}
%{
#include <net/sock.h>

struct netlink_sock {
	/* struct sock has to be the first member of netlink_sock */
	struct sock		sk;
	u32			portid;
	u32			dst_portid;
	u32			dst_group;
	u32			flags;
	u32			subscriptions;
	u32			ngroups;
	unsigned long		*groups;
	unsigned long		state;
	size_t			max_recvmsg_len;
	wait_queue_head_t	wait;
	bool			cb_running;
	struct netlink_callback	cb;
	struct mutex		*cb_mutex;
	struct mutex		cb_def_mutex;
	void			(*netlink_rcv)(struct sk_buff *skb);
	int			(*netlink_bind)(int group);
	void			(*netlink_unbind)(int group);
	struct module		*module;
};
%}

function dump_wait_queue:long (arg_q:long)
%{
    wait_queue_head_t *q = (void*) STAP_ARG_arg_q;
    wait_queue_t *curr = (wait_queue_t*)q->task_list.next;
    _stp_printf("-={Wait Queue head q: %p}=-\n",q);
    _stp_printf("-q->lock:0x%08x\n", q->lock);
    _stp_printf("-q->task_list.next=0x%016lx\n",q->task_list.next);
    _stp_printf("-q->task_list.prev=0x%016lx\n",q->task_list.prev);
    _stp_printf("-={Wait queue element curr: %p}=-\n",curr);
    _stp_printf("-curr->flags:0x%08x\n",curr->flags);
    _stp_printf("-curr->private:0x%016lx\n",curr->private);
    _stp_printf("-curr->func:0x%016lx\n",curr->func);
    _stp_printf("-curr->task_list.next:0x%016lx\n",curr->task_list.next);
    _stp_printf("-curr->task_list.prev:0x%016lx\n",curr->task_list.prev);
%}

function dump_netlink_socket:long (arg_sock:long)
%{
    struct socket *sock = (void*) STAP_ARG_arg_sock;
    struct sock *sk = sock->sk;
    struct netlink_sock *nlk = (void*)sk;
    wait_queue_head_t wt = nlk->wait;
    wait_queue_t *curr = (wait_queue_t*)wt.task_list.next;
    _stp_printf("-={Dump struct socket: %p}=-\n", sock);
    _stp_printf("- sk: %p\n", sk);
    _stp_printf("-nlk: %p\n", nlk);
    _stp_printf("-={Dump struct sock: %p}=-\n", sk);
    _stp_printf("- nlk->wait: 0x%016lx\n", nlk->wait);
    _stp_printf("- wt.lock: 0x%08x\n", wt.lock);
    _stp_printf("- wt.task_list.next: 0x%16lx\n", wt.task_list.next);
    _stp_printf("- wt.task_list.prev: 0x%16lx\n", wt.task_list.prev);
    _stp_printf("-={wait_queue_t curr: %p}=-\n", current);
    _stp_printf("- flags: 0x%08x\n", curr->flags);
    _stp_printf("- *private: 0x%16lx\n", curr->private);
    _stp_printf("- *func: 0x%16lx\n", curr->func);
    _stp_printf("- struct list_head next: 0x%016lx\n", curr->task_list.next);
    _stp_printf("- struct list_head prev: 0x%016lx\n", curr->task_list.prev);
    _stp_printf("\n\n");
    /*
    struct sock *sk = (void*) STAP_ARG_arg_sock;
    struct netlink_sock *nlk = (void*) sk;
    _stp_printf("\n\n-={dump netlink socket: %p}=-\n", nlk);
    _stp_printf("- sk: %p\n", sk);
    _stp_printf("- sk->sk_rmem_alloc: %x\n", sk->sk_rmem_alloc);
    _stp_printf("- sk->sk_rcvbuf: %x\n", sk->sk_rcvbuf);
    _stp_printf("- nlk->state: %d\n", nlk->state);
    _stp_printf("- nlk->state: %d\n", nlk->state);
    _stp_printf("- sk->sk_flags: %x\n", sk->sk_flags);
    _stp_printf("sk->sk_refcnt: %d\n", sk->sk_refcnt);
    _stp_printf("We are on the waiting queue...\n");
    _stp_printf("\n\n");
    */
%}
