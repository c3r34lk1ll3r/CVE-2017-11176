global found = 0;
// I use a common syscall to intercept data
probe syscall.open
{
    if (found == 0) {
        printf("[S] Entered syscall open. Dumping usefull offset\n");
        found = 1;
        dump_data();
    }
}

%{
#include <linux/fdtable.h>
#include <net/sock.h>
%}

function dump_data()
%{
    struct task_struct *c=current;
    struct files_struct *files = current->files;
    _stp_printf("Hello from probe!!\n");
    _stp_printf("Current:%p\n",c);
    _stp_printf("Offset thread_info->task:0x%lx\n", (long) offsetof(struct thread_info, task));
    _stp_printf("Offset current->files:0x%lx\n", (long) offsetof(struct task_struct, files));
    _stp_printf("Offset files->fdt:%lx\n", (long) offsetof(struct files_struct, fdt));
    _stp_printf("Offset fdt->fd:0x%lx\n", (long) offsetof(struct fdtable, fd));
    _stp_printf("Offset fd->private_data:0x%lx\n", (long) offsetof(struct file, private_data));
    _stp_printf("Offset private_data->sk:0x%lx\n", (long) offsetof(struct socket, sk));
    _stp_printf("Offet hlist->socket:0x%lx\n", (long) offsetof(struct sock, sk_node));
%}
